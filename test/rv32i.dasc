#include <inttypes.h>
#include <stdio.h>

#include "dasm_proto.h"
#include "dasm_rv32i.h"

#define BUF_SIZE 1024

static uint8_t *test(void);

static uint8_t buf[BUF_SIZE];

int main(int argc, char *argv)
{
  uint8_t *b;

  b = test();

  for (int i = 0; i < BUF_SIZE; i++) {
    if (i % 16 == 0) {
      printf("\n%04x:", i);
    }
    printf(" %02x", *b++);
  }
  return 0;
}

static uint8_t *test(void)
{
  dasm_State *d;
  size_t code_size;

  dasm_init(&d, DASM_MAXSECTION); /* 1 */

  /* dasm_setupglobal(Dst_DECL, void **gl, unsigned int maxgl); /* 2 */

  | .arch rv32i
  | .section code
  | .actionlist test_actions

  dasm_setup(&d, test_actions); /* 3 */

  | and a0, a1, a2

  /* int dasm_checkstep(Dst_DECL, int secmatch);     /* 4 */
  /* void dasm_growpc(Dst_DECL, unsigned int maxpc); /* 4 */
  /* void dasm_put(Dst_DECL, int start, ...);        /* 4 */

  /* int dasm_link(Dst_DECL, size_t *szp);    /* 5 */
  if (dasm_link(&d, &code_size) < 0) {
    fprintf(stderr, "Error: dasm_link() failed\n");
    return NULL;
  }

  fprintf(stderr, "Code size: %d\n", code_size);

  /* int dasm_encode(Dst_DECL, void *buffer); /* 6 */
  dasm_encode(&d, buf);

  /* int dasm_getpclabel(Dst_DECL, unsigned int pc); /* 7 */
  dasm_free(&d); /* 8 */

  return buf;
}
